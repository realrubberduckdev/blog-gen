name: Blog Generator with Local AI

on:
    workflow_dispatch:
        inputs:
            blog_request_json:
                description: "Blog request JSON content"
                required: true
                type: string
                default: '{"Topic": "Getting Started with Local AI Models", "Description": "A comprehensive guide to setting up and using local AI models for content generation", "TargetAudience": "Developers", "WordCount": 100, "Tone": "Professional"}'

jobs:
    generate-blog-post:
        runs-on: windows-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup .NET 9
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: "9.0.x"

            - name: Create and Validate JSON File
              shell: pwsh
              run: |
                  Write-Host "üìù Creating blog-request.json from input..."
                  '${{ inputs.blog_request_json }}' | Out-File -FilePath blog-request.json -Encoding UTF8

                  Write-Host "‚úÖ Validating JSON format..."
                  try {
                    $json = Get-Content blog-request.json -Raw | ConvertFrom-Json
                    Write-Host "‚úÖ JSON syntax is valid"
                  }
                  catch {
                    Write-Host "‚ùå ERROR: Invalid JSON format: $($_.Exception.Message)"
                    Write-Host "Input received:"
                    Write-Host '${{ inputs.blog_request_json }}'
                    exit 1
                  }

                  Write-Host "‚úÖ Validating required fields..."
                  $requiredFields = @("Topic", "Description", "TargetAudience", "WordCount", "Tone")

                  foreach ($field in $requiredFields) {
                    if (-not $json.PSObject.Properties.Name -contains $field) {
                      Write-Host "‚ùå ERROR: Missing required field '$field'"
                      exit 1
                    }
                  }

                  Write-Host "‚úÖ JSON validation successful!"
                  Write-Host "üìÑ Blog request content:"
                  Get-Content blog-request.json

            - name: Pull AI Model
              shell: pwsh
              run: |
                  Write-Host "üì¶ Getting docker details"
                  docker version

                  Write-Host "üìä Checking available disk space..."
                  Get-PSDrive -PSProvider FileSystem | Format-Table Name, Used, Free

                  Write-Host "üíæ Checking Docker disk usage..."
                  docker system df

                  Write-Host "üì¶ Pulling Docker model: ai/gemma3"

                  # Pull the model with error handling
                  try {
                    docker pull ai/gemma3
                    Write-Host "‚úÖ Successfully pulled ai/gemma3"
                  }
                  catch {
                    Write-Host "‚ùå Failed to pull ai/gemma3"
                    Write-Host "Available images:"
                    docker images
                    exit 1
                  }

                  Write-Host "üîç Verifying model is available:"
                  $gemmaImages = docker images --format "table {{.Repository}}:{{.Tag}}" | Select-String "gemma3"
                  if (-not $gemmaImages) {
                    Write-Host "üìä Checking available disk space..."
                    Get-PSDrive -PSProvider FileSystem | Format-Table Name, Used, Free

                    Write-Host "üíæ Checking Docker disk usage..."
                    docker system df
                    Write-Host "‚ùå Model ai/gemma3 not found in local images"
                    exit 1
                  }
                  Write-Host "‚úÖ Model verification successful"

            - name: Run Blog Generator
              shell: pwsh
              run: |
                  Write-Host "‚úçÔ∏è Running blog generator with local AI model..."

                  # Run with local model configuration
                  dotnet run --project blog-gen.csproj --configuration Release --LocalModel:UseLocal=true blog-request.json

                  if ($LASTEXITCODE -ne 0) {
                    Write-Host "‚ùå Blog generation failed"
                    exit 1
                  }

                  Write-Host "‚úÖ Blog generation completed"

            - name: Upload Generated Content
              uses: actions/upload-artifact@v4
              with:
                  name: generated-blog-content
                  path: |
                      *.md
                      blog-request.json
                  retention-days: 7
